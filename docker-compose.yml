# Docker compose definition to run mist.io in production mode, so no mounted
# code, no dev containers etc. Only this single file is required.

version: '2.0'

services:


  mongodb:
    image: mongo
    restart: on-failure:5
    volumes:
      - mongodb:/data/db:rw

  rabbitmq:
    platform: linux/x86_64
    image: rabbitmq:3.8.16-management
    restart: on-failure:5

  memcached:
    image: memcached:1.6.9
    restart: on-failure:5

  elasticsearch:
    image: elasticsearch:7.16.2
    restart: on-failure:5
    volumes:
      - elasticsearch:/usr/share/elasticsearch/data:rw
    environment:
      OPENSEARCH_JAVA_OPTS: "-Xms256M -Xmx256M"
      ES_JAVA_OPTS: "-Xms256M -Xmx256M"
      network.host: "172.18.0.2"
      transport.host: "localhost"



  logstash:
    image: $IMG_REGISTRY/logstash:$IMG_TAG
    restart: on-failure:5
    depends_on:
      - elasticsearch
      - rabbitmq

  elasticsearch-manage:
    platform: linux/x86_64
    image: $IMG_REGISTRY/elasticsearch-manage:$IMG_TAG
    command: ./scripts/add_templates.py
    restart: on-failure:5
    depends_on:
      - elasticsearch
      - rabbitmq

  kibana:
    platform: linux/x86_64
    image: kibana:5.6.10
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
    restart: on-failure:5
    depends_on:
      - elasticsearch

  socat:
    platform: linux/x86_64
    image: mist/docker-socat
    restart: on-failure:5
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:rw

  mailmock:
    platform: linux/x86_64
    image: mist/mailmock
    restart: on-failure:5

  swagger:
    platform: linux/x86_64
    image: mist/swagger-ui
    environment:
      API_URL: /api/v1/spec
    restart: on-failure:5


  scheduler: &backend
    platform: linux/x86_64
    image: $IMG_REGISTRY/api:$IMG_TAG
    depends_on:
      - mongodb
      - elasticsearch
      - rabbitmq
    volumes:
      - ./settings:$CONF_DIR/settings
    environment:
      SETTINGS_FILE: $CONF_DIR/settings/settings.py
    stdin_open: true
    tty: true
    restart: on-failure:5
    command: bin/wait-all bin/scheduler

  api:
    <<: *backend
    command: bin/wait-all bin/uwsgi
    platform: linux/x86_64
    expose:
      - 80

  api-v2:
    <<: *backend
    platform: linux/x86_64
    command: uwsgi --http 0.0.0.0:8080 --wsgi-file v2/mist_api_v2/__main__.py --callable application --master --processes 8 --max-requests 100 --honour-stdin --enable-threads
    expose:
      - 8080

  sockjs:
    <<: *backend
    platform: linux/x86_64
    command: bin/wait-all bin/sockjs
    expose:
      - 8081

  apply-migrations:
    <<: *backend
    platform: linux/x86_64
    command: bin/wait-all bin/migrate

  dramatiq:
    <<: *backend
    platform: linux/x86_64
    command: bin/wait-all bin/dramatiq

  ui:
    image: $IMG_REGISTRY/ui:$IMG_TAG
    platform: linux/x86_64
    command: sh /entry.sh
    stdin_open: true
    tty: true
    restart: on-failure:5
    expose:
      - 80

  landing:
    image: $IMG_REGISTRY/landing:$IMG_TAG
    platform: linux/x86_64
    command: sh /entry.sh
    stdin_open: true
    tty: true
    restart: on-failure:5
    expose:
      - 80

  nginx:
    image: $IMG_REGISTRY/nginx:$IMG_TAG
    platform: linux/x86_64
    restart: on-failure:5
    ports:
      - 80:80
    depends_on:
      - api
      - sockjs
      - landing
      - ui

  influxdb:
    image: influxdb:1.8.4
    platform: linux/x86_64
    environment:
      INFLUXDB_DB: telegraf
      INFLUXDB_BIND_ADDRESS: "0.0.0.0:8088"
    ports:
      - 8083:8083
      - 8086:8086
    volumes:
      - influxdb:/var/lib/influxdb

  gocky:
    image: $IMG_REGISTRY/gocky:$IMG_TAG
    platform: linux/x86_64
    command: -config /etc/gocky/config.toml
    ports:
      - 9096:9096
      - 9097:9097
    depends_on:
      - rabbitmq

  traefik:
    image: traefik:v1.5
    platform: linux/x86_64
    command:
      # - --logLevel=INFO
      - --accesslog
      # - --accesslog.format=json
      - --api
      - --api.entrypoint=traefik
      - --rest
      - --rest.entrypoint=traefik
      - --defaultentrypoints=http
      - --entrypoints=Name:http Address::80
      - --entrypoints=Name:traefik Address::8080
    ports:
      - 8040:80
      - 8041:8080

  huproxy:
    image: $IMG_REGISTRY/huproxy:$IMG_TAG
    platform: linux/x86_64
    command: /app --listen 0.0.0.0:8086
    environment:
      MONGO_URI: mongodb://mongodb:27017
    expose:
      - 8086

  wsproxy:
    image: $IMG_REGISTRY/wsproxy:$IMG_TAG
    platform: linux/x86_64
    expose:
      - 8764



volumes:
  elasticsearch: {}
  influxdb: {}
  mongodb: {}
  victoria-metrics: {}
